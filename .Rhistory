library("arm")
# for reproducibility of simulated data
SEED <- 1151
set.seed(SEED)
N <- 50
# Random Uniform Distribution
x <- runif(N, 1, 5)
plot(seq(0, 6, length=N), x, type = 'l')
hist(x, breaks = 51, col = "orange", main = "rnorm")
plot(seq(0, 6, length=N), x, type = 'l')
hist(x, breaks = 51, col = "orange", main = "rnorm")
plot(x, type = 'l')
hist(x, breaks = 51, col = "orange", main = "rnorm")
plot(x, type = 'l')
plot(x)
?plot
plot(x, type = "o")
plot(x, type = "b")
plot(x, type = "c")
plot(x, type = "h")
plot(x, type = "s")
plot(x, type = "c")
plot(x, type = "h")
hist(x, breaks = 51, col = "orange", main = "rnorm")
plot(x, type = "p")
?hist
hist(x, breaks = 51, col = "orange", main = "rnorm")
hist(y, breaks = 51, col = "orange", main = "rnorm")
# Normal Distribution
y <- rnorm(N, 10 + 3*x, 3)
hist(y, breaks = 51, col = "orange", main = "rnorm")
N <- 1000
# Random Uniform Distribution
x <- runif(N, 1, 5)
hist(x, breaks = N+1, col = "orange", main = "runif")
hist(x, breaks =  50, col = "orange", main = "runif")
hist(x, breaks =  51, col = "orange", main = "runif")
# Normal Distribution
y <- rnorm(N, 10 + 3*x, 3)
hist(y, breaks = 51, col = "orange", main = "rnorm")
plot(y, type = "p")
sd(y)
var(y)
summary(y)
10 + 3*x
?rnorm
summary(x)
rnorm(1, 50)
rnorm(1, 50, 2)
rnorm(1, 50, 4)
rnorm(20, 50, 4)
rnorm(10, 50, 4)
rnorm(10, 50, 1)
rnorm(10, 50, 10)
sd(rnorm(10, 50, 10))
sd(rnorm(100, 50, 10))
sd(rnorm(100000, 50, 10))
sd(rnorm(100, 50, 10))
rnorm(100, 50, 10)
#https://avehtari.github.io/ROS-Examples/examples.html
library("arm")
# for reproducibility of simulated data
SEED <- 1151
set.seed(SEED)
N <- 1000
# Random Uniform Distribution
x <- runif(N, 1, 5)
hist(x, breaks =  51, col = "orange", main = "runif")
plot(x, type = "p")
# Normal Distribution
# Y is dependent on x and have a clear relationship
y <- rnorm(N, 10 + 3*x, 3)
hist(y, breaks = 51, col = "orange", main = "rnorm")
plot(y, type = "p")
x_binary <- ifelse(x<3, 0, 1)
sd(y)
var(y)
summary(y)
N <- 10000
# Random Uniform Distribution
x <- runif(N, 1, 5)
hist(x, breaks =  51, col = "orange", main = "runif")
plot(x, type = "p")
# Normal Distribution
# Y is dependent on x and have a clear relationship
y <- rnorm(N, 10 + 3*x, 3)
hist(y, breaks = 51, col = "orange", main = "rnorm")
plot(y, type = "p")
x_binary <- ifelse(x<3, 0, 1)
sd(y)
var(y)
summary(y)
# Normal Distribution
# Y is dependent on x and have a clear relationship
# when second param mean is a vector it iterates through it
?rnorm
# Normal Distribution
# Y is dependent on x and have a clear relationship
# when second param mean is a vector it iterates through it
rnorm?
y <- rnorm(N, 10 + 3*x, 3)
# Normal Distribution
# Y is dependent on x and have a clear relationship
# when second param mean is a vector it iterates through it
rnorm?
y <- rnorm(N, 10 + 3*x, 3)
# Normal Distribution
# Y is dependent on x and have a clear relationship
# when second param mean is a vector it iterates through it
rnorm()?
y <- rnorm(N, 10 + 3*x, 3)
# Normal Distribution
# Y is dependent on x and have a clear relationship
# when second param mean is a vector it iterates through it, also sd gets a bit wonky
rnorm()?
y <- rnorm(N, 10 + 3*x, 100)
hist(y, breaks = 51, col = "orange", main = "rnorm")
# Normal Distribution
# Y is dependent on x and have a clear relationship
# when second param mean is a vector it iterates through it, also sd gets a bit wonky
rnorm()?
y <- rnorm(N, 10 + 3*x, 100)
# Normal Distribution
# Y is dependent on x and have a clear relationship
# when second param mean is a vector it iterates through it, also sd gets a bit wonky
rnorm()?
y <- rnorm(N, 10 + 3*x, 100)
# for reproducibility of simulated data
SEED <- 1151
set.seed(SEED)
N <- 10000
# Random Uniform Distribution
x <- runif(N, 1, 5)
hist(x, breaks =  51, col = "orange", main = "runif")
plot(x, type = "p")
# Normal Distribution
# Y is dependent on x and have a clear relationship
# when second param mean is a vector it iterates through it, also sd gets a bit wonky
rnorm()?
y <- rnorm(N, 10 + 3*x, 100)
y <- rnorm(N, 10 + 3*x, 100)
hist(y, breaks = 51, col = "orange", main = "rnorm")
plot(y, type = "p")
y <- rnorm(N, 10 + 3*x, 5)
hist(y, breaks = 51, col = "orange", main = "rnorm")
y <- rnorm(N, 10 + 3*x, 500)
hist(y, breaks = 51, col = "orange", main = "rnorm")
y <- rnorm(N, 10 + 3*x, 3)
hist(y, breaks = 51, col = "orange", main = "rnorm")
plot(y, type = "p")
sd(y) # how spread out the data is
y <- rnorm(N, 10 + 3*x, 500)
sd(y) # how spread out the data is from mean
?sd
var(y) #
sqrt()
sqrt(247158.8)
data <- data.frame(N, x, y, x_binary)
lm_1a <- lm(y ~ x_binary, data = data)
display(lm_1a)
#https://avehtari.github.io/ROS-Examples/examples.html
library("arm")
display(lm_1a)
summary(lm_1a)
par(mar=c(3, 3, 1.5, 1), mgp=c(1.7, .5, 0), tck=-.01)
plot(x_binary, y, xlab="", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with binary treatment", cex.main=.9, xaxt="n", cex.lab=.9, cex.axis=.9)
axis(1, c(0,1), c("    Control", "Treatment    "), cex.axis=.9)
abline(coef(lm_1a)[1], coef(lm_1a)[2])
text(0.3, 13, paste("Estimated treatment effect is\nslope of fitted line: ", fround(coef(lm_1a)[2], 1)), cex=.8, adj=0)
par(mar=c(3, 3, 1.5, 1), mgp=c(1.7, .5, 0), tck=-.01)
plot(x_binary, y, xlab="", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with binary treatment", cex.main=.9, xaxt="n", cex.lab=.9, cex.axis=.9)
axis(1, c(0,1), c("    Control", "Treatment    "), cex.axis=.9)
abline(coef(lm_1a)[1], coef(lm_1a)[2])
text(0.3, 13, paste("Estimated treatment effect is\nslope of fitted line: ", fround(coef(lm_1a)[2], 1)), cex=.8, adj=0)
?par
# for reproducibility of simulated data
SEED <- 1151
set.seed(SEED)
N <- 50
# Random Uniform Distribution
x <- runif(N, 1, 5)
hist(x, breaks =  51, col = "orange", main = "runif")
plot(x, type = "p")
y <- rnorm(N, 10 + 3*x, 3)
hist(y, breaks = 51, col = "orange", main = "rnorm")
plot(y, type = "p")
sd(y) # how spread out the data is from mean in standardized measurements
var(y) # how spread out the data is from the mean in the unit the data is measured
summary(y)
x_binary <- ifelse(x < 3, 0, 1)
data <- data.frame(N, x, y, x_binary)
lm_1a <- lm(y ~ x_binary, data = data)
display(lm_1a)
summary(lm_1a)
plot(x_binary, y, xlab="", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with binary treatment", cex.main=.9, xaxt="n", cex.lab=.9, cex.axis=.9)
axis(1, c(0,1), c("    Control", "Treatment    "), cex.axis=.9)
abline(coef(lm_1a)[1], coef(lm_1a)[2])
text(0.3, 13, paste("Estimated treatment effect is\nslope of fitted line: ", fround(coef(lm_1a)[2], 1)), cex=.8, adj=0)
lm_1b <- lm(y ~ x, data = data)
display(lm_1b)
summary(lm_1b)
summary(lm_1a)
plot(x, y, xlab="Treatment level", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with continuous treatment", cex.main=.9, cex.lab=.9, cex.axis=.9)
abline(coef(lm_1b)[1], coef(lm_1b)[2])
text(3.2, 15, paste("Estimated treatment\neffect per unit of x is\nslope of fitted line: ", fround(coef(lm_1b)[2], 1)), cex=.8, adj=0)
plot(x, y, xlab="Treatment level", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with continuous treatment", cex.main=.9, cex.lab=.9, cex.axis=.9)
abline(coef(lm_1b)[1], coef(lm_1b)[2])
plot(x_binary, y, xlab="", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with binary treatment", cex.main=.9, xaxt="n", cex.lab=.9, cex.axis=.9)
abline(coef(lm_1a)[1], coef(lm_1a)[2])
axis(1, c(0,1), c("    Control", "Treatment    "), cex.axis=.9)
text(0.3, 13, paste("Estimated treatment effect is\nslope of fitted line: ", fround(coef(lm_1a)[2], 1)), cex=.8, adj=0)
plot(x, y, xlab="Treatment level", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with continuous treatment", cex.main=.9, cex.lab=.9, cex.axis=.9)
abline(coef(lm_1b)[1], coef(lm_1b)[2])
text(3.2, 15, paste("Estimated treatment\neffect per unit of x is\nslope of fitted line: ", fround(coef(lm_1b)[2], 1)), cex=.8, adj=0)
lm_1b <- lm(y ~ x, data = data)
display(lm_1b)
summary(lm_1b)
display(lm_1b)
coef(lm_1b)[2]
lm_1b)[1]
coef(lm_1b)[1]
abline(coef(lm_1b)[1])
abline(coef(lm_1b)[1], 0)
abline(coef(lm_1b)[1], .5)
coef(lm_1b)[1]
abline(coef(lm_1b)[1], 1)
coef(lm_1b)[2]
abline(coef(lm_1b)[1], 2)
abline(coef(lm_1b)[1], 3)
abline(25)
abline(25,0)
abline(25,-1)
?abline
abline(20,-.32)
plot(x, y, xlab="Treatment level", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with continuous treatment", cex.main=.9, cex.lab=.9, cex.axis=.9)
abline(a=20,b=-.32)
abline(a=20,b=0)
abline(a=20,b=.32)
plot()
plot(x, y, xlim=(0,), xlab="Treatment level", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with continuous treatment", cex.main=.9, cex.lab=.9, cex.axis=.9)
plot(x, y, xlim=(0,6), xlab="Treatment level", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with continuous treatment", cex.main=.9, cex.lab=.9, cex.axis=.9)
plot(x, y, xlim=c(0,6), xlab="Treatment level", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with continuous treatment", cex.main=.9, cex.lab=.9, cex.axis=.9)
abline(coef(lm_1b)[1], coef(lm_1b)[2])
abline(a=20,b=.32)
abline(a=20,b=-.32)
abline(a=20,b=0)
data$x
max(data$x)
max(round(data$x))
plot(x, y, xlim=c(0,max(round(data$x))), xlab="Treatment level", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with continuous treatment", cex.main=.9, cex.lab=.9, cex.axis=.9)
plot(x, y, xlab="Treatment level", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with continuous treatment", cex.main=.9, cex.lab=.9, cex.axis=.9)
abline(a=coef(lm_1b)[1], b=coef(lm_1b)[2])
text(3.2, 15, paste("Estimated treatment\neffect per unit of x is\nslope of fitted line: ", fround(coef(lm_1b)[2], 1)), cex=.8, adj=0)
display(lm_1a)
lm_1a <- lm(y ~ x_binary, data = data)
display(lm_1a)
###################################   Setup   ##########################################
# for reproducibility of simulated data
SEED <- 1151
set.seed(SEED)
N <- 50
# Random Uniform Distribution
x <- runif(N, 1, 5)
hist(x, breaks =  51, col = "orange", main = "runif")
plot(x, type = "p")
y <- rnorm(N, 10 + 3*x, 3)
hist(y, breaks = 51, col = "orange", main = "rnorm")
plot(y, type = "p")
sd(y) # how spread out the data is from mean in standardized measurements
var(y) # how spread out the data is from the mean in the unit the data is measured
summary(y)
x_binary <- ifelse(x < 3, 0, 1)
data <- data.frame(N, x, y, x_binary)
lm_1a <- lm(y ~ x_binary, data = data)
display(lm_1a)
summary(lm_1a)
plot(x_binary, y, xlab="", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with binary treatment", cex.main=.9, xaxt="n", cex.lab=.9, cex.axis=.9)
abline(coef(lm_1a)[1], coef(lm_1a)[2])
axis(1, c(0,1), c("    Control", "Treatment    "), cex.axis=.9)
text(0.3, 13, paste("Estimated treatment effect is\nslope of fitted line: ", fround(coef(lm_1a)[2], 1)), cex=.8, adj=0)
lm_1b <- lm(y ~ x, data = data)
display(lm_1b)
summary(lm_1b)
plot(x, y,xlim=c(0,max(round(data$x))), xlab="Treatment level", ylab="Outcome measurement", pch=20, cex=.5, bty="l", main="Regression with continuous treatment", cex.main=.9, cex.lab=.9, cex.axis=.9)
abline(a=coef(lm_1b)[1], b=coef(lm_1b)[2])
a=coef(lm_1b)[1]
coef(lm_1b)[1]
display(lm_1b)
b=coef(lm_1b)[2]
coef(lm_1b)[2]
text(3.2, 15, paste("Estimated treatment\neffect per unit of x is\nslope of fitted line: ", fround(coef(lm_1b)[2], 1)), cex=.8, adj=0)
# https://www.kaggle.com/hamelg/intro-to-r-part-22-probability-distributions
# https://www.youtube.com/watch?v=Rxe086csxTU
###################################   Setup   ##########################################
library(ggplot2)
# for reproducibility of simulated data
SEED <- 1151
set.seed(SEED)
N <- 50000
# Random Uniform Distribution
# 5k random numbers between 1 and 5
runif_data <- runif(N, 0, 10)
head(runif_data, 25)
mean(runif_data)
sd(runif_data)
var(runif_data)
hist(runif_data, breaks =  51, col = "orange", main = "runif")
# good video explaining calculating density/kde https://www.youtube.com/watch?v=x5zLaWT5KPs&t=322s
# kde is alot better with non uniform distributions, but this look pretty
plot(density(runif_data,kernel="gaussian"))
runif_frame = with(density(runif_data,kernel="gaussian"),  # Create data frame density values
data.frame(x,y))
runif_plot <- ggplot(data = runif_frame, aes(x = x, y = y)) +   # Create the plot
geom_line(color="NA")+
geom_ribbon(data=subset(runif_frame,x > -1 & x < 11),
aes(ymax=y, ymin=0),
fill="skyblue",
alpha=0.4)
runif_plot
# getting probability of getting something to the left
# of quantile/value aka cumulative distribution function
punif(q=4, min=0, max=10) # 40% chance of randomly selecting 4 or less
punif(q=10, min=0, max=10) # 100% chance of randomly select 10 or less
# getting quantile/value of given percentage
qunif(p=.4, min=0, max=10)
qunif(p=1, min=0, max=10)
runif_plot_with_prob_cutoffs <- runif_plot  +
geom_ribbon(data=subset(runif_frame,x > qunif(p=.4, min=0, max=10)),
aes(ymax=y, ymin=0),
fill="red",
alpha=0.4)+
geom_text(x=2,y=0.03,label=round(punif(q=4, min=0, max=10),4),size=4) +
geom_text(x=6.6,y=0.03,label=round(1-punif(q=4, min=0, max=10),4),size=4)
runif_plot_with_prob_cutoffs
# this will not look right if youre looking at a density curve with small n
# also not having correct kde parameters (kernel, bandwith, weight, etc..) doesnt help
dunif(x=0, min=0, max=10)
dunif(x=5.2, min=0, max=10)
dunif(x=10, min=0, max=10)
dunif(x=11, min=0, max=10)
